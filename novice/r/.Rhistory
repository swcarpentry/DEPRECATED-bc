content(foo)
foo <- GET(paste0("https://api-ssl.bitly.com/v3/shorten?access_token=",token,"&longUrl=",crd$url[1],"&format=txt"))
content(foo)
foo <- GET(paste0("https://api-ssl.bitly.com/v3/shorten?access_token=",token,"&longUrl=",crd$url[1]))
content(foo)$data$url
library("rebird")
library("dplyr")
library("httr")
crd <- ebirdnotable(region = "CA-BC-CP", regtype = "subnational2", back = 3,
provisional = TRUE, hotspot = FALSE, simple = FALSE)
crd$url <-
crd <- crd %>%
mutate(url = paste0("http://ebird.org/ebird/view/checklist?subID=",subID),
tweet = paste(howMany, comName, "observed at", locName, "on", obsDt,
"Checklist:", url))
nchar(crd$tweet)
foo <- GET(paste0("https://api-ssl.bitly.com/v3/shorten?access_token=",
BitlyToken,"&longUrl=",crd$url[1]))
foo
content(foo)$data$url
crd$url[1]
View(crd)
crd <- crd %>%
mutate(url = paste0("http://ebird.org/ebird/view/checklist?subID=",subID),
tweet = paste(howMany, comName, "observed at", locName, "on", obsDt,
"Checklist:", url))
rm(crd)
crd <- ebirdnotable(region = "CA-BC-CP", regtype = "subnational2", back = 3,
provisional = TRUE, hotspot = FALSE, simple = FALSE)
crd %>%
mutate(url = paste0("http://ebird.org/ebird/view/checklist?subID=",subID),
tweet = paste(howMany, comName, "observed at", locName, "on", obsDt,
"Checklist:", url))
crd <- crd %>%
mutate(url = paste0("http://ebird.org/ebird/view/checklist?subID=",subID),
tweet = paste(howMany, comName, "observed at", locName, "on", obsDt,
"Checklist:", url))
foo <- GET(paste0("https://api-ssl.bitly.com/v3/shorten?access_token=",
BitlyToken,"&longUrl=",crd$url[1]))
content(foo)$data$url
foo <- GET("https://api-ssl.bitly.com/v3/shorten",
query = list(access_token=BitlyToken, longUrl=crd$url[1]))
content(foo)$data$url
foo
content(foo)
?stop
shorten <- function(url, token) {
res <- GET("https://api-ssl.bitly.com/v3/shorten",
query = list(access_token=token, longUrl=url))
con <- res$content
if (!con$status_code == 200) {
stop("Status Code: ", con$status_code, ": ", status_text)
}
short_url <- con$data$url
short_url
}
View(crd)
shorten("http://ebird.org/ebird/view/checklist?subID=S19769127")
shorten("http://ebird.org/ebird/view/checklist?subID=S19769127", BitlyToken)
foo$content
shorten <- function(url, token) {
res <- GET("https://api-ssl.bitly.com/v3/shorten",
query = list(access_token=token, longUrl=url))
con <- content(res)
if (!con$status_code == 200) {
stop("Status Code: ", con$status_code, ": ", status_text)
}
short_url <- con$data$url
short_url
}
shorten("http://ebird.org/ebird/view/checklist?subID=S19769127", BitlyToken)
bar <- sapply(crd$url, shorten, token = BitlyToken)
bar
?sapply
bar <- sapply(crd$url, shorten, token = BitlyToken, USE.NAMES = FALSE)
library("rebird")
library("dplyr")
library("httr")
shorten <- function(url, token) {
res <- GET("https://api-ssl.bitly.com/v3/shorten",
query = list(access_token=token, longUrl=url))
con <- content(res)
if (!con$status_code == 200) {
stop("Status Code: ", con$status_code, ": ", status_text)
}
short_url <- con$data$url
short_url
}
crd <- ebirdnotable(region = "CA-BC-CP", regtype = "subnational2", back = 3,
provisional = TRUE, hotspot = FALSE, simple = FALSE)
crd <- crd %>%
mutate(url = paste0("http://ebird.org/ebird/view/checklist?subID=",subID),
short_url = sapply(url, shorten, token = BitlyToken, USE.NAMES = FALSE)
tweet = paste(howMany, comName, "observed at", locName, "on", obsDt,
"Checklist:", short_url))
crd <- crd %>%
mutate(url = paste0("http://ebird.org/ebird/view/checklist?subID=",subID),
short_url = sapply(url, shorten, token = BitlyToken, USE.NAMES = FALSE),
tweet = paste(howMany, comName, "observed at", locName, "on", obsDt,
"Checklist:", short_url))
View(crd)
nchar(crd$tweet)
View(crd)
url_ok("http://bit.ly/WzHhNR")
url_ok("http://ebird.org/ebird/view/checklist?subID=S19768767")
x <- GET("http://httpbin.org/status/300")
stop_for_status(x)
stop_for_status
x <- GET("http://httpbin.org/status/404")
stop_for_status(x)
shorten <- function(url, token) {
res <- GET("https://api-ssl.bitly.com/v3/shorten",
query = list(access_token=token, longUrl=url))
con <- content(res)
stop_for_status(x)
short_url <- con$data$url
short_url
}
shorten("http://httpbin.org/status/404", BitlyToken)
ebirdnotable
install.packages("rebird")
install.packages("rebird")
install.packages(c("jsonlite", "R2HTML", "raster"))
library(rebird)
ebirdnotable
devtools::install_github("ropensci/rebird")
shorten <- function(url, token) {
res <- GET("https://api-ssl.bitly.com/v3/shorten",
query = list(access_token=token, longUrl=url))
con <- content(res)
warn_for_status(con)
short_url <- con$data$url
short_url
}
shorten("http://httpbin.org/status/404", BitlyToken)
library("dplyr")
library("httr")
shorten("http://httpbin.org/status/404", BitlyToken)
shorten <- function(url, token) {
res <- GET("https://api-ssl.bitly.com/v3/shorten",
query = list(access_token=token, longUrl=url))
con <- content(res)
stop_for_status(con)
short_url <- con$data$url
short_url
}
shorten("http://httpbin.org/status/404", BitlyToken)
library("rebird")
library("dplyr")
library("httr")
shorten <- function(url, token) {
res <- GET("https://api-ssl.bitly.com/v3/shorten",
query = list(access_token=token, longUrl=url))
con <- content(res)
stop_for_status(con)
short_url <- con$data$url
short_url
}
shorten("http://httpbin.org/status/404", BitlyToken)
shorten <- function(url, token) {
res <- GET("https://api-ssl.bitly.com/v3/shorten",
query = list(access_token=token, longUrl=url))
stop_for_status(res)
con <- content(res)
short_url <- con$data$url
short_url
}
shorten("http://httpbin.org/status/404", BitlyToken)
url_ok("http://ebird.org/ebird/view/checklist?subID=S19768776", BitlyToken)
url_ok("http://ebird.org/ebird/view/checklist?subID=S19768767", BitlyToken)
traceback()
url_ok("http://ebird.org/ebird/view/checklist?subID=S19768767")
shorten("http://ebird.org/ebird/view/checklist?subID=S19768767", BitlyToken)
shorten("http://ebird.org/ebird/view/checklist?subID=S197687acb", BitlyToken)
url_success("http://ebird.org/ebird/view/checklist?subID=S19768767")
url_success("http://ebird.org/")
GET("http://ebird.org/ebird/view/checklist?subID=S19768767")
GET("http://ebird.org/ebird/view/checklist?subID=S19768756")
GET("http://ebird.org/ebird/view/checklist?subID=S197687abnkl")
stop_for_status("http://ebird.org/ebird/view/checklist?subID=S197687abnkl")
stop_for_status(HEAD("http://ebird.org/ebird/view/checklist?subID=S197687abnkl"))
url_success(HEAD("http://ebird.org/ebird/view/checklist?subID=S197687abnkl"))
shorten <- function(url, token) {
stop_for_status(HEAD(url))
res <- GET("https://api-ssl.bitly.com/v3/shorten",
query = list(access_token=token, longUrl=url))
con <- content(res)
short_url <- con$data$url
short_url
}
shorten("http://ebird.org/ebird/view/checklist?subID=S197687acb", BitlyToken)
shorten <- function(url, token) {
warn_for_status(HEAD(url))
res <- GET("https://api-ssl.bitly.com/v3/shorten",
query = list(access_token=token, longUrl=url))
con <- content(res)
short_url <- con$data$url
short_url
}
shorten("http://ebird.org/ebird/view/checklist?subID=S197687acb", BitlyToken)
?HEAD
shorten <- function(url, token) {
stop_for_status(HEAD(url))
res <- GET("https://api-ssl.bitly.com/v3/shorten",
query = list(access_token=token, longUrl=url))
stop_for_status(res)
con <- content(res)
short_url <- con$data$url
short_url
}
Search()
search()
shorten <- function(url, token) {
stop_for_status(HEAD(url))
res <- GET("https://api-ssl.bitly.com/v3/shorten",
query = list(access_token=token, longUrl=url))
stop_for_status(res)
con <- content(res)
short_url <- con$data$url
short_url
}
crd <- ebirdnotable(region = "CA-BC-CP", regtype = "subnational2", back = 3,
provisional = TRUE, hotspot = FALSE, simple = FALSE)
crd <- crd %>%
mutate(url = paste0("http://ebird.org/ebird/view/checklist?subID=",subID),
short_url = sapply(url, shorten, token = BitlyToken, USE.NAMES = FALSE),
tweet = paste(howMany, comName, "observed at", locName, "on", obsDt,
"Checklist:", short_url))
crd <- crd %>%
mutate(url = paste0("http://ebird.org/ebird/view/checklist?subID=",subID),
short_url = sapply(url, shorten, token = BitlyToken, USE.NAMES = FALSE),
tweet = paste(howMany, comName, "observed at", locName, "on", obsDt,
"Checklist:", short_url))
crd
shorten("http://ebird.org/ebird/canada/view/checklist?subID=S19774593", token = BitlyToken)
GET("http://ebird.org/ebird/canada/view/checklist?subID=S19774593")
HEAD("http://ebird.org/ebird/canada/view/checklist?subID=S19774593")
HEAD("http://ebird.org/ebird/canada/view/checklist?subID=S19774593")
GET("http://ebird.org/ebird/canada/view/checklist?subID=S19774593")
GET("http://ebird.org/ebird/view/checklist?subID=S19774593")
HEAD("http://ebird.org/ebird/view/checklist?subID=S19774593")
HEAD("http://ebird.org/ebird/view/checklist", query = list(subID = "S19774593"))
GET("http://ebird.org/ebird/view/checklist", query = list(subID = "S19774593"))
foo <- .Last.value
content(foo)
search()
HEAD("http://ebird.org")
GET("http://ebird.org/ebird/view/checklist", query = list(subID = "S19774593"))
HEAD("http://ebird.org/ebird/view/checklist", query = list(subID = "S19774593"))
RCurl::httpHEAD("http://ebird.org/ebird/view/checklist?subID=S19774593")
RCurl::httpGET("http://ebird.org/ebird/view/checklist?subID=S19774593")
url.exists("http://ebird.org/ebird/view/checklist?subID=S19774593")
RCurl::url.exists("http://ebird.org/ebird/view/checklist?subID=S19774593")
RCurl::getURL("http://ebird.org/ebird/view/checklist?subID=S19774593")
?getForm
getForm("http://ebird.org/ebird/view/checklist", subID="S19774593")
RCurl::getForm("http://ebird.org/ebird/view/checklist", subID="S19774593")
foo <- RCurl::getForm("http://ebird.org/ebird/view/checklist", subID="S19774593")
foo
shorten <- function(url, token) {
stop_for_status(GET(url))
res <- GET("https://api-ssl.bitly.com/v3/shorten",
query = list(access_token=token, longUrl=url))
stop_for_status(res)
con <- content(res)
short_url <- con$data$url
short_url
}
crd <- ebirdnotable(region = "CA-BC-CP", regtype = "subnational2", back = 3,
provisional = TRUE, hotspot = FALSE, simple = FALSE)
crd <- crd %>%
mutate(url = paste0("http://ebird.org/ebird/view/checklist?subID=",subID),
short_url = sapply(url, shorten, token = BitlyToken, USE.NAMES = FALSE),
tweet = paste(howMany, comName, "observed at", locName, "on", obsDt,
"Checklist:", short_url))
nchar(crd$tweet)
View(crd)
View(crd)
crd <- crd %>%
mutate(url = paste0("http://ebird.org/ebird/view/checklist?subID=",subID),
short_url = sapply(url, shorten, token = BitlyToken, USE.NAMES = FALSE),
tweet = paste(howMany, comName, "observed at", locName, "on", obsDt,
". ", ifelse(!obsReviewed, "(Not Reviewed)", ""),
"Checklist:", short_url))
nchar(crd$tweet)
View(crd)
View(crd)
crd <- crd %>%
mutate(url = paste0("http://ebird.org/ebird/view/checklist?subID=",subID),
short_url = sapply(url, shorten, token = BitlyToken, USE.NAMES = FALSE),
tweet = paste(howMany, comName, "at", locName, "on", obsDt,
". ", ifelse(!obsReviewed, "(provisional).", ""),
" ", short_url))
View(crd)
crd <- crd %>%
mutate(url = paste0("http://ebird.org/ebird/view/checklist?subID=",subID),
short_url = sapply(url, shorten, token = BitlyToken, USE.NAMES = FALSE),
tweet = paste(howMany, comName, "at", locName, "on", obsDt,
".", ifelse(!obsReviewed, " (provisional). ", " "), short_url))
read.csv("http://pub.data.gov.bc.ca/datasets/179924/individual_facilities_summary.csv")
library(data.table)
foo <- fread("data/2002/checklists.csv")
library(data.table)
foo <- fread("data/2002/checklists.csv")
install.packages(c("coin", "DBI", "devtools", "gplots", "maps", "pingr", "rgdal", "rgeos", "rmarkdown", "rms", "RUnit", "Taxonstand", "testthat"))
coffee()
lsa()
ls()
fortunes::fortune()
fortunes::fortune()
read.csv("/clipboard", sep="/t")
read.csv("clipboard", sep="/t")
read.csv("clipboard", sep="\t")
read_xls_cb <- function(...)
{}
read_xls_cb <- function(...) {}
read_xls_cb <- function(...) {
read_xls_cb <- function(...) {
read.csv("clipboard", sep="\t", ...)
}
read_xls_cb()
read_xls_cb()
read_xls_cb(, header = FALSE)
read_xls_cb()
read_xls_cb(header = FALSE)
xls_clipboard <- function(...) {
read.csv("clipboard", sep="\t", ...)
}
xls_clipboard()
xls_clipboard(header = FALSE)
foo <- xls_clipboard(header = FALSE)
read.table(stdin(), header=TRUE)
.env$xls_clipboard <- function(...) {
read.csv("clipboard", stringsAsFactors = FALSE, ...)
}
xls_clipboard()
.env$xls_clipboard <- function(...) {
read.csv("clipboard", stringsAsFactors = FALSE, ...)
}
attach(.env)
xls_clipboard()
.env$xls_clipboard <- function(...) {
read.table("clipboard", stringsAsFactors = FALSE, ...)
}
attach(.env)
xls_clipboard()
.env$xls_clipboard <- function(...) {
read.table("clipboard", sep = "\t", stringsAsFactors = FALSE, ...)
}
attach(.env)
attach(.env)
xls_clipboard()
.env$xls_clipboard <- function(...) {
read.table("clipboard", sep = "\t", header = TRUE,
stringsAsFactors = FALSE, ...)
}
attach(.env)
xls_clipboard()
help(package = "Rstudio")
help(package = "rstudio")
coffee()
xl_clipboard <- function(...) {
read.table("clipboard", sep = "\t", header = TRUE,
stringsAsFactors = FALSE, ...)
}
xl_clipboard()
xl_clipboard(header = FALSE)
?read.table
xl_clipboard <- function(header = TRUE...) {
read.table("clipboard", sep = "\t", header = header,
stringsAsFactors = FALSE, ...)
}
xl_clipboard()
xl_clipboard <- function(header = TRUE...) {
read.table("clipboard", sep = "\t", header = header,
stringsAsFactors = FALSE, ...)
}
xl_clipboard
xl_clipboard()
xl_clipboard <- function(header = TRUE, ...) {
read.table("clipboard", sep = "\t", header = header,
stringsAsFactors = FALSE, ...)
}
xl_clipboard()
xl_clipboard(header = FALSE)
xl_clipboard <- function(header = TRUE, ...) {
read.table("clipboard", sep = "\t", header = header,
stringsAsFactors = FALSE, ...)
}
xl_clipboard()
foo <- xl_clipboard()
View(foo)
foo <- xl_clipboard(header = FALSE)
View(foo)
xl_clipboard(header = TRUE)
foo <- xl_clipboard(header = TRUE)
read.csv("clipboard")
library(RColorBrewer)
brewer.all()
brewer.pal()
brewer.all
display.brewer.all()
display.brewer.pal("RdYlGn")
?display.brewer.pal
brewer.pal.info
pal.info("RdYlGn")
brewer.pal(11, "RdYlGn")
display.brewer.pal(11, "RdYlGn")
display.brewer.pal(4, "RdYlGn")
display.brewer.pal(3, "RdYlGn")
display.brewer.pal(5, "RdYlGn")
display.brewer.pal(11, "RdYlGn")
display.brewer.pal(11, "RdYlGn")[1,3,5,8]
display.brewer.pal(11, "RdYlGn")[c(1,3,5,8)]
brewer.pal(11, "RdYlGn")[c(1,3,5,8)]
dput(rev(brewer.pal(11, "RdYlGn")[c(1,3,5,8)]))
display.brewer.pal(11, "")
display.brewer.pal(11, "Greys")
brewer.pal(9, "Greys")[4]
dput(c(rev(brewer.pal(11, "RdYlGn")[c(1,3,5,8)])),brewer.pal(9, "Greys")[4])
dput(c(rev(brewer.pal(11, "RdYlGn")[c(1,3,5,8)]),brewer.pal(9, "Greys")[4]))
dput(c(brewer.pal(11, "RdYlGn")[c(1,3,5,8)],brewer.pal(9, "Greys")[4]))
display.brewer.pal(11, "RdYlGn")[1,3,5,8]
brewer.pal(11, "RdYlGn")[1,3,5,8]
brewer.pal(11, "RdYlGn")[c(1,3,5,8)]
?rGEOS::gSimplify
install.packages("rGEOS")
?rgeos::gSimplify
devtools::install_github("ropensci/togeojson@reworkapi")
library(togeojson)
?to_geo_json
library('sp')
poly1 <- Polygons(list(Polygon(cbind(c(-100,-90,-85,-100),
c(40,50,45,40)))), "1")
poly2 <- Polygons(list(Polygon(cbind(c(-90,-80,-75,-90),
c(30,40,35,30)))), "2")
sp_poly <- SpatialPolygons(list(poly1, poly2), 1:2)
to_geo_json(sp_poly)
to_geo_json(sp_poly, pretty=TRUE)
to_geojson(sp_poly)
getwd()
to_geo_json(sp_poly, pretty=TRUE, auto_unbox=TRUE)
airzones <- readOGR(dsn = "c:/_dev//airquality/data/airzones/Polygon")
library(rgdal)
airzones <- readOGR(dsn = "c:/_dev//airquality/data/airzones/Polygon")
airzones <- readOGR(dsn = "c:/_dev//airquality/data/airzones", layer = "Polygon")
to_geo_json(airzones)
to_geojson(airzones)
airzones@data$data <- LETTERS[1:7]
to_geojson(airzones)
to_geo_json(airzones)
to_geo_json(airzones, pretty = TRUE)
library('maps')
data(us.cities)
to_geojson(us.cities[1:2,], lat='lat', lon='long')
to_geo_json(us.cities[1:2,], lat='lat', lon='long')
to_geo_json(us.cities[1:2,], lat='lat', lon='long', pretty = TRUE)
to_geo_json(us.cities[1:2,], lat='lat', lon='long', pretty = TRUE)
to_geo_json(us.cities[1:2,], lat='lat', lon='long')
to_geojson(us.cities[1:2,], lat='lat', lon='long')
readLines("myfile.geojson")
cat(readLines("myfile.geojson"))
to_geo_list(us.cities[1:2,], lat='lat', lon='long')
to_topojson(airzones)
?to_topojson
?jsonlite::toJSON
jsonlite::fromjson("myfile.geojson")
jsonlite::fromJSON("myfile.geojson")
toJSON(jsonlite::fromJSON("myfile.geojson"))
jsonlite::toJSON(jsonlite::fromJSON("myfile.geojson"))
foo <- jsonlite::toJSON(jsonlite::fromJSON("myfile.geojson"))
foo
foo <- jsonlite::toJSON(jsonlite::fromJSON("myfile.geojson"), pretty = TRUE)
foo
cities.sp <- as.SpatialPointsDataFrame(us.cities)
library(rgdal)
cities.sp <- as.SpatialPointsDataFrame(us.cities)
cities.sp <- SpatialPointsDataFrame(us.cities)
cities.sp <- us.cities
?coordinates
coordinates(citie.sp) <- ~long+lat
coordinates(cities.sp) <- ~long+lat
plot(cities.sp)
to_geojson(cities.sp)
getwd()
getwd()
library(sp)
?as.SpatialPolygonsDataFrame.SpatialPolygons
x <- c(1.4,2.6,3.6,4,5)
x + 2
x + 2
x <- c(x,2)
x
x*5
x*6
x^6
round(x)
round(x, digits = 1)
animals <- c("birds", "fish", "squirrels")
animals
paste(animals, "are silly")
x == 2
y <- x == 2
z <- factor(c("male", "female"))
z
z  <- c(z, "trans")
setwd("c:/_dev/bc/novice/r")
rmarkdow::render("03-supp-loops-in-depth.Rmd", "md_document")
rmarkdown::render("03-supp-loops-in-depth.Rmd", "md_document")
?rmarkdown::render
?md_document
knitr::knit("03-supp-loops-in-depth.Rmd", output = "03-supp-loops-in-depth.md")
